/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface LiquidTokenInterface extends ethers.utils.Interface {
  functions: {
    'AUTH_MANAGER()': FunctionFragment;
    'LEDGER_BEACON()': FunctionFragment;
    'MAX_ALLOWABLE_DIFFERENCE()': FunctionFragment;
    'ORACLE_MASTER()': FunctionFragment;
    'addLedger(bytes32,bytes32,uint16)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'bufferedDeposits()': FunctionFragment;
    'bufferedRedeems()': FunctionFragment;
    'claimUnbonded()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'depositCap()': FunctionFragment;
    'disableLedger(address)': FunctionFragment;
    'distributeLosses(uint256,uint256)': FunctionFragment;
    'distributeRewards(uint256,uint256)': FunctionFragment;
    'emergencyPauseLedger(address)': FunctionFragment;
    'findLedger(bytes32)': FunctionFragment;
    'flushStakes()': FunctionFragment;
    'fundRaisedBalance()': FunctionFragment;
    'getLedgerAddresses()': FunctionFragment;
    'getPooledTokenByShares(uint256)': FunctionFragment;
    'getSharesByPooledToken(uint256)': FunctionFragment;
    'getStashAccounts()': FunctionFragment;
    'getTotalPooledToken()': FunctionFragment;
    'getUnbonded(address)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(address,address,address,address,address,address,address,uint256,uint128,string,string,uint8)': FunctionFragment;
    'ledgerBorrow(address)': FunctionFragment;
    'ledgerStake(address)': FunctionFragment;
    'name()': FunctionFragment;
    'nominateBatch(bytes32[],bytes32[][])': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'redeem(uint256)': FunctionFragment;
    'removeLedger(address)': FunctionFragment;
    'resume()': FunctionFragment;
    'resumeLedger(address)': FunctionFragment;
    'setDepositCap(uint256)': FunctionFragment;
    'setDevelopersTreasury(address,address)': FunctionFragment;
    'setFee(uint16,uint16)': FunctionFragment;
    'setLedgerBeacon(address)': FunctionFragment;
    'setLedgerFactory(address)': FunctionFragment;
    'setMaxAllowableDifference(uint128)': FunctionFragment;
    'setRelaySpec((uint16,uint128,uint128,uint256))': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferFromLedger(uint256,uint256)': FunctionFragment;
    'transferToLedger(uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'AUTH_MANAGER',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'LEDGER_BEACON',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'MAX_ALLOWABLE_DIFFERENCE',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'ORACLE_MASTER',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'addLedger',
    values: [BytesLike, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'bufferedDeposits',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'bufferedRedeems',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'claimUnbonded',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositCap',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'disableLedger',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'distributeLosses',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'distributeRewards',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'emergencyPauseLedger',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'findLedger',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'flushStakes',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'fundRaisedBalance',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getLedgerAddresses',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getPooledTokenByShares',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getSharesByPooledToken',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getStashAccounts',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getTotalPooledToken',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'getUnbonded', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'ledgerBorrow',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'ledgerStake', values: [string]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'nominateBatch',
    values: [BytesLike[], BytesLike[][]],
  ): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'removeLedger',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'resume', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'resumeLedger',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDepositCap',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDevelopersTreasury',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setFee',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setLedgerBeacon',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setLedgerFactory',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaxAllowableDifference',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setRelaySpec',
    values: [
      {
        maxValidatorsPerLedger: BigNumberish;
        minNominatorBalance: BigNumberish;
        ledgerMinimumActiveBalance: BigNumberish;
        maxUnlockingChunks: BigNumberish;
      },
    ],
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFromLedger',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferToLedger',
    values: [BigNumberish],
  ): string;

  decodeFunctionResult(
    functionFragment: 'AUTH_MANAGER',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'LEDGER_BEACON',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MAX_ALLOWABLE_DIFFERENCE',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'ORACLE_MASTER',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'addLedger', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'bufferedDeposits',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'bufferedRedeems',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claimUnbonded',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCap', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'disableLedger',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'distributeLosses',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'distributeRewards',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'emergencyPauseLedger',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'findLedger', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'flushStakes',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'fundRaisedBalance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getLedgerAddresses',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPooledTokenByShares',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSharesByPooledToken',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getStashAccounts',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTotalPooledToken',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUnbonded',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'ledgerBorrow',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'ledgerStake',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'nominateBatch',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'removeLedger',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'resume', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'resumeLedger',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDepositCap',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDevelopersTreasury',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setFee', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setLedgerBeacon',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setLedgerFactory',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setMaxAllowableDifference',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setRelaySpec',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferFromLedger',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferToLedger',
    data: BytesLike,
  ): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Claimed(address,uint256)': EventFragment;
    'Deposited(address,uint256,uint256)': EventFragment;
    'FeeSet(uint16,uint16,uint16)': EventFragment;
    'LedgerAdd(address,bytes32,bytes32)': EventFragment;
    'LedgerDisable(address)': EventFragment;
    'LedgerPaused(address)': EventFragment;
    'LedgerRemove(address)': EventFragment;
    'LedgerResumed(address)': EventFragment;
    'Losses(address,uint256,uint256)': EventFragment;
    'Paused(address)': EventFragment;
    'Redeemed(address,uint256,uint256)': EventFragment;
    'Referral(address,address,uint256,uint256)': EventFragment;
    'Rewards(address,uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Claimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LedgerAdd'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LedgerDisable'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LedgerPaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LedgerRemove'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LedgerResumed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Losses'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Redeemed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Referral'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Rewards'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type ClaimedEvent = TypedEvent<
  [string, BigNumber] & { receiver: string; amount: BigNumber }
>;

export type DepositedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    sender: string;
    amount: BigNumber;
    shares: BigNumber;
  }
>;

export type FeeSetEvent = TypedEvent<
  [number, number, number] & {
    fee: number;
    feeTreasuryBP: number;
    feeDevelopersBP: number;
  }
>;

export type LedgerAddEvent = TypedEvent<
  [string, string, string] & {
    addr: string;
    stashAccount: string;
    controllerAccount: string;
  }
>;

export type LedgerDisableEvent = TypedEvent<[string] & { addr: string }>;

export type LedgerPausedEvent = TypedEvent<[string] & { addr: string }>;

export type LedgerRemoveEvent = TypedEvent<[string] & { addr: string }>;

export type LedgerResumedEvent = TypedEvent<[string] & { addr: string }>;

export type LossesEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    ledger: string;
    losses: BigNumber;
    balance: BigNumber;
  }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RedeemedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    receiver: string;
    amount: BigNumber;
    shares: BigNumber;
  }
>;

export type ReferralEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    userAddr: string;
    referralAddr: string;
    amount: BigNumber;
    shares: BigNumber;
  }
>;

export type RewardsEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    ledger: string;
    rewards: BigNumber;
    balance: BigNumber;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class LiquidToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LiquidTokenInterface;

  functions: {
    AUTH_MANAGER(overrides?: CallOverrides): Promise<[string]>;

    LEDGER_BEACON(overrides?: CallOverrides): Promise<[string]>;

    MAX_ALLOWABLE_DIFFERENCE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ORACLE_MASTER(overrides?: CallOverrides): Promise<[string]>;

    addLedger(
      _stashAccount: BytesLike,
      _controllerAccount: BytesLike,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    bufferedDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    bufferedRedeems(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimUnbonded(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    disableLedger(
      _ledgerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    distributeLosses(
      _totalLosses: BigNumberish,
      _ledgerBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    distributeRewards(
      _totalRewards: BigNumberish,
      _ledgerBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    emergencyPauseLedger(
      _ledgerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    findLedger(
      _stashAccount: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    flushStakes(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    fundRaisedBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLedgerAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    getPooledTokenByShares(
      _sharesAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getSharesByPooledToken(
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getStashAccounts(overrides?: CallOverrides): Promise<[string[]]>;

    getTotalPooledToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUnbonded(
      _holder: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & { waiting: BigNumber; unbonded: BigNumber }
    >;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _authManager: string,
      _xcTOKEN: string,
      _controller: string,
      _developers: string,
      _treasury: string,
      _oracleMaster: string,
      _withdrawal: string,
      _depositCap: BigNumberish,
      _maxAllowableDifference: BigNumberish,
      __name: string,
      __symbol: string,
      __decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    ledgerBorrow(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    ledgerStake(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nominateBatch(
      _stashAccounts: BytesLike[],
      _validators: BytesLike[][],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    redeem(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removeLedger(
      _ledgerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    resume(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    resumeLedger(
      _ledgerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDepositCap(
      _depositCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDevelopersTreasury(
      _treasury: string,
      _developers: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setFee(
      _feeTreasury: BigNumberish,
      _feeDevelopers: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setLedgerBeacon(
      _ledgerBeacon: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setLedgerFactory(
      _ledgerFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMaxAllowableDifference(
      _maxAllowableDifference: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRelaySpec(
      _relaySpec: {
        maxValidatorsPerLedger: BigNumberish;
        minNominatorBalance: BigNumberish;
        ledgerMinimumActiveBalance: BigNumberish;
        maxUnlockingChunks: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFromLedger(
      _amount: BigNumberish,
      _excess: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferToLedger(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  AUTH_MANAGER(overrides?: CallOverrides): Promise<string>;

  LEDGER_BEACON(overrides?: CallOverrides): Promise<string>;

  MAX_ALLOWABLE_DIFFERENCE(overrides?: CallOverrides): Promise<BigNumber>;

  ORACLE_MASTER(overrides?: CallOverrides): Promise<string>;

  addLedger(
    _stashAccount: BytesLike,
    _controllerAccount: BytesLike,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  allowance(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  bufferedDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  bufferedRedeems(overrides?: CallOverrides): Promise<BigNumber>;

  claimUnbonded(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    _spender: string,
    _subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositCap(overrides?: CallOverrides): Promise<BigNumber>;

  disableLedger(
    _ledgerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  distributeLosses(
    _totalLosses: BigNumberish,
    _ledgerBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  distributeRewards(
    _totalRewards: BigNumberish,
    _ledgerBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  emergencyPauseLedger(
    _ledgerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  findLedger(
    _stashAccount: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  flushStakes(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  fundRaisedBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getLedgerAddresses(overrides?: CallOverrides): Promise<string[]>;

  getPooledTokenByShares(
    _sharesAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getSharesByPooledToken(
    _amount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getStashAccounts(overrides?: CallOverrides): Promise<string[]>;

  getTotalPooledToken(overrides?: CallOverrides): Promise<BigNumber>;

  getUnbonded(
    _holder: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & { waiting: BigNumber; unbonded: BigNumber }
  >;

  increaseAllowance(
    _spender: string,
    _addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _authManager: string,
    _xcTOKEN: string,
    _controller: string,
    _developers: string,
    _treasury: string,
    _oracleMaster: string,
    _withdrawal: string,
    _depositCap: BigNumberish,
    _maxAllowableDifference: BigNumberish,
    __name: string,
    __symbol: string,
    __decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  ledgerBorrow(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  ledgerStake(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nominateBatch(
    _stashAccounts: BytesLike[],
    _validators: BytesLike[][],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  redeem(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  removeLedger(
    _ledgerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  resume(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  resumeLedger(
    _ledgerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDepositCap(
    _depositCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDevelopersTreasury(
    _treasury: string,
    _developers: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setFee(
    _feeTreasury: BigNumberish,
    _feeDevelopers: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setLedgerBeacon(
    _ledgerBeacon: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setLedgerFactory(
    _ledgerFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMaxAllowableDifference(
    _maxAllowableDifference: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRelaySpec(
    _relaySpec: {
      maxValidatorsPerLedger: BigNumberish;
      minNominatorBalance: BigNumberish;
      ledgerMinimumActiveBalance: BigNumberish;
      maxUnlockingChunks: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    _sender: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFromLedger(
    _amount: BigNumberish,
    _excess: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferToLedger(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    AUTH_MANAGER(overrides?: CallOverrides): Promise<string>;

    LEDGER_BEACON(overrides?: CallOverrides): Promise<string>;

    MAX_ALLOWABLE_DIFFERENCE(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE_MASTER(overrides?: CallOverrides): Promise<string>;

    addLedger(
      _stashAccount: BytesLike,
      _controllerAccount: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bufferedDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    bufferedRedeems(overrides?: CallOverrides): Promise<BigNumber>;

    claimUnbonded(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    deposit(
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    depositCap(overrides?: CallOverrides): Promise<BigNumber>;

    disableLedger(
      _ledgerAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    distributeLosses(
      _totalLosses: BigNumberish,
      _ledgerBalance: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    distributeRewards(
      _totalRewards: BigNumberish,
      _ledgerBalance: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    emergencyPauseLedger(
      _ledgerAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    findLedger(
      _stashAccount: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    flushStakes(overrides?: CallOverrides): Promise<void>;

    fundRaisedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getLedgerAddresses(overrides?: CallOverrides): Promise<string[]>;

    getPooledTokenByShares(
      _sharesAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSharesByPooledToken(
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getStashAccounts(overrides?: CallOverrides): Promise<string[]>;

    getTotalPooledToken(overrides?: CallOverrides): Promise<BigNumber>;

    getUnbonded(
      _holder: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & { waiting: BigNumber; unbonded: BigNumber }
    >;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(
      _authManager: string,
      _xcTOKEN: string,
      _controller: string,
      _developers: string,
      _treasury: string,
      _oracleMaster: string,
      _withdrawal: string,
      _depositCap: BigNumberish,
      _maxAllowableDifference: BigNumberish,
      __name: string,
      __symbol: string,
      __decimals: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    ledgerBorrow(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ledgerStake(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nominateBatch(
      _stashAccounts: BytesLike[],
      _validators: BytesLike[][],
      overrides?: CallOverrides,
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    redeem(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    removeLedger(
      _ledgerAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    resume(overrides?: CallOverrides): Promise<void>;

    resumeLedger(
      _ledgerAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDepositCap(
      _depositCap: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDevelopersTreasury(
      _treasury: string,
      _developers: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFee(
      _feeTreasury: BigNumberish,
      _feeDevelopers: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setLedgerBeacon(
      _ledgerBeacon: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setLedgerFactory(
      _ledgerFactory: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaxAllowableDifference(
      _maxAllowableDifference: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setRelaySpec(
      _relaySpec: {
        maxValidatorsPerLedger: BigNumberish;
        minNominatorBalance: BigNumberish;
        ledgerMinimumActiveBalance: BigNumberish;
        maxUnlockingChunks: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFromLedger(
      _amount: BigNumberish,
      _excess: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferToLedger(
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    'Claimed(address,uint256)'(
      receiver?: string | null,
      amount?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; amount: BigNumber }
    >;

    Claimed(
      receiver?: string | null,
      amount?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; amount: BigNumber }
    >;

    'Deposited(address,uint256,uint256)'(
      sender?: string | null,
      amount?: null,
      shares?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; amount: BigNumber; shares: BigNumber }
    >;

    Deposited(
      sender?: string | null,
      amount?: null,
      shares?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; amount: BigNumber; shares: BigNumber }
    >;

    'FeeSet(uint16,uint16,uint16)'(
      fee?: null,
      feeTreasuryBP?: null,
      feeDevelopersBP?: null,
    ): TypedEventFilter<
      [number, number, number],
      { fee: number; feeTreasuryBP: number; feeDevelopersBP: number }
    >;

    FeeSet(
      fee?: null,
      feeTreasuryBP?: null,
      feeDevelopersBP?: null,
    ): TypedEventFilter<
      [number, number, number],
      { fee: number; feeTreasuryBP: number; feeDevelopersBP: number }
    >;

    'LedgerAdd(address,bytes32,bytes32)'(
      addr?: null,
      stashAccount?: null,
      controllerAccount?: null,
    ): TypedEventFilter<
      [string, string, string],
      { addr: string; stashAccount: string; controllerAccount: string }
    >;

    LedgerAdd(
      addr?: null,
      stashAccount?: null,
      controllerAccount?: null,
    ): TypedEventFilter<
      [string, string, string],
      { addr: string; stashAccount: string; controllerAccount: string }
    >;

    'LedgerDisable(address)'(
      addr?: null,
    ): TypedEventFilter<[string], { addr: string }>;

    LedgerDisable(addr?: null): TypedEventFilter<[string], { addr: string }>;

    'LedgerPaused(address)'(
      addr?: null,
    ): TypedEventFilter<[string], { addr: string }>;

    LedgerPaused(addr?: null): TypedEventFilter<[string], { addr: string }>;

    'LedgerRemove(address)'(
      addr?: null,
    ): TypedEventFilter<[string], { addr: string }>;

    LedgerRemove(addr?: null): TypedEventFilter<[string], { addr: string }>;

    'LedgerResumed(address)'(
      addr?: null,
    ): TypedEventFilter<[string], { addr: string }>;

    LedgerResumed(addr?: null): TypedEventFilter<[string], { addr: string }>;

    'Losses(address,uint256,uint256)'(
      ledger?: null,
      losses?: null,
      balance?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { ledger: string; losses: BigNumber; balance: BigNumber }
    >;

    Losses(
      ledger?: null,
      losses?: null,
      balance?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { ledger: string; losses: BigNumber; balance: BigNumber }
    >;

    'Paused(address)'(
      account?: null,
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    'Redeemed(address,uint256,uint256)'(
      receiver?: string | null,
      amount?: null,
      shares?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { receiver: string; amount: BigNumber; shares: BigNumber }
    >;

    Redeemed(
      receiver?: string | null,
      amount?: null,
      shares?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { receiver: string; amount: BigNumber; shares: BigNumber }
    >;

    'Referral(address,address,uint256,uint256)'(
      userAddr?: null,
      referralAddr?: null,
      amount?: null,
      shares?: null,
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        userAddr: string;
        referralAddr: string;
        amount: BigNumber;
        shares: BigNumber;
      }
    >;

    Referral(
      userAddr?: null,
      referralAddr?: null,
      amount?: null,
      shares?: null,
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        userAddr: string;
        referralAddr: string;
        amount: BigNumber;
        shares: BigNumber;
      }
    >;

    'Rewards(address,uint256,uint256)'(
      ledger?: null,
      rewards?: null,
      balance?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { ledger: string; rewards: BigNumber; balance: BigNumber }
    >;

    Rewards(
      ledger?: null,
      rewards?: null,
      balance?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { ledger: string; rewards: BigNumber; balance: BigNumber }
    >;

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    'Unpaused(address)'(
      account?: null,
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    AUTH_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    LEDGER_BEACON(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ALLOWABLE_DIFFERENCE(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE_MASTER(overrides?: CallOverrides): Promise<BigNumber>;

    addLedger(
      _stashAccount: BytesLike,
      _controllerAccount: BytesLike,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bufferedDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    bufferedRedeems(overrides?: CallOverrides): Promise<BigNumber>;

    claimUnbonded(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositCap(overrides?: CallOverrides): Promise<BigNumber>;

    disableLedger(
      _ledgerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    distributeLosses(
      _totalLosses: BigNumberish,
      _ledgerBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    distributeRewards(
      _totalRewards: BigNumberish,
      _ledgerBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    emergencyPauseLedger(
      _ledgerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    findLedger(
      _stashAccount: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    flushStakes(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    fundRaisedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getLedgerAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getPooledTokenByShares(
      _sharesAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSharesByPooledToken(
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getStashAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPooledToken(overrides?: CallOverrides): Promise<BigNumber>;

    getUnbonded(_holder: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      _authManager: string,
      _xcTOKEN: string,
      _controller: string,
      _developers: string,
      _treasury: string,
      _oracleMaster: string,
      _withdrawal: string,
      _depositCap: BigNumberish,
      _maxAllowableDifference: BigNumberish,
      __name: string,
      __symbol: string,
      __decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    ledgerBorrow(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ledgerStake(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nominateBatch(
      _stashAccounts: BytesLike[],
      _validators: BytesLike[][],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    removeLedger(
      _ledgerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    resume(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    resumeLedger(
      _ledgerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDepositCap(
      _depositCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDevelopersTreasury(
      _treasury: string,
      _developers: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setFee(
      _feeTreasury: BigNumberish,
      _feeDevelopers: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setLedgerBeacon(
      _ledgerBeacon: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setLedgerFactory(
      _ledgerFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMaxAllowableDifference(
      _maxAllowableDifference: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRelaySpec(
      _relaySpec: {
        maxValidatorsPerLedger: BigNumberish;
        minNominatorBalance: BigNumberish;
        ledgerMinimumActiveBalance: BigNumberish;
        maxUnlockingChunks: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFromLedger(
      _amount: BigNumberish,
      _excess: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferToLedger(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AUTH_MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LEDGER_BEACON(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_ALLOWABLE_DIFFERENCE(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    ORACLE_MASTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLedger(
      _stashAccount: BytesLike,
      _controllerAccount: BytesLike,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    bufferedDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bufferedRedeems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimUnbonded(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableLedger(
      _ledgerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    distributeLosses(
      _totalLosses: BigNumberish,
      _ledgerBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    distributeRewards(
      _totalRewards: BigNumberish,
      _ledgerBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    emergencyPauseLedger(
      _ledgerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    findLedger(
      _stashAccount: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    flushStakes(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    fundRaisedBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLedgerAddresses(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPooledTokenByShares(
      _sharesAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSharesByPooledToken(
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getStashAccounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalPooledToken(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUnbonded(
      _holder: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _authManager: string,
      _xcTOKEN: string,
      _controller: string,
      _developers: string,
      _treasury: string,
      _oracleMaster: string,
      _withdrawal: string,
      _depositCap: BigNumberish,
      _maxAllowableDifference: BigNumberish,
      __name: string,
      __symbol: string,
      __decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    ledgerBorrow(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    ledgerStake(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nominateBatch(
      _stashAccounts: BytesLike[],
      _validators: BytesLike[][],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    removeLedger(
      _ledgerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    resume(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    resumeLedger(
      _ledgerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDepositCap(
      _depositCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDevelopersTreasury(
      _treasury: string,
      _developers: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setFee(
      _feeTreasury: BigNumberish,
      _feeDevelopers: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setLedgerBeacon(
      _ledgerBeacon: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setLedgerFactory(
      _ledgerFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMaxAllowableDifference(
      _maxAllowableDifference: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRelaySpec(
      _relaySpec: {
        maxValidatorsPerLedger: BigNumberish;
        minNominatorBalance: BigNumberish;
        ledgerMinimumActiveBalance: BigNumberish;
        maxUnlockingChunks: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFromLedger(
      _amount: BigNumberish,
      _excess: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferToLedger(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
